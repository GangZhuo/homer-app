{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Homer-App User interface for WEB AI",
    "title": "Homer-App",
    "license": {
      "name": "AGPL",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "1.1.2"
  },
  "host": "localhost:9080",
  "basePath": "/api/v3",
  "paths": {
    "/admin/profiles": {
      "get": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "JWT": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "ApiKeyAuth": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "name": [
              "Auth-Token"
            ]
          }
        ],
        "description": "Returns data from server",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "operationId": "ListProfiles",
        "responses": {
          "201": {
            "description": "HepsubSchema",
            "schema": {
              "$ref": "#/definitions/HepsubSchema"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/advanced": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns advanced setting of user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Advanced"
        ],
        "operationId": "ListAdvancedSettings",
        "responses": {
          "201": {
            "description": "GlobalSettingsStructList",
            "schema": {
              "$ref": "#/definitions/GlobalSettingsStructList"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add advanced item",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "advanced"
        ],
        "operationId": "advancedAddAdvanced",
        "responses": {}
      }
    },
    "/advanced/{guid}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Get advanced item by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "advanced"
        ],
        "operationId": "advancedGetAdvancedAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "11111111-1111-1111-1111-111111111111",
            "description": "guid of item",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      },
      "put": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update advanced item by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "advanced"
        ],
        "operationId": "advancedUpdateAdvancedAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "11111111-1111-1111-1111-111111111111",
            "description": "guid of item",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Delete advanced item by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "advanced"
        ],
        "operationId": "advancedDeleteAdvancedAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "11111111-1111-1111-1111-111111111111",
            "description": "guid of item",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/agent/search/{guid}/{type}": {
      "get": {
        "description": "Get agent by guid and type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubGetAgentSearchByTypeAndGUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "guid of agent",
            "name": "guid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "example": "home",
            "description": "type of agent",
            "name": "type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/agent/subscribe": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all agents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubGetAgentsub",
        "responses": {
          "201": {
            "description": "AgentsLocationList",
            "schema": {
              "$ref": "#/definitions/AgentsLocationList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Add agent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubAddAgentsubWithKey",
        "parameters": [
          {
            "description": "agent parameters",
            "name": "AgentsLocation Struct",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentsLocation"
            }
          }
        ],
        "responses": {}
      }
    },
    "/agent/subscribe/{guid}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Get agent by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubGetAgentsubAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "guid of agent",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      },
      "put": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Update agent by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubUpdateAgentsubAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of agent",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of agent",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AgentsLocation",
            "schema": {
              "$ref": "#/definitions/AgentsLocation"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Delete agent by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubDeleteAgentsubAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "guid of agent",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/agent/type/{type}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Get agent by type",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "agent"
        ],
        "operationId": "agentsSubGetAgentsubByType",
        "parameters": [
          {
            "type": "string",
            "example": "home",
            "description": "type of agent",
            "name": "type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/alias": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all aliases",
        "produces": [
          "application/json"
        ],
        "tags": [
          "alias"
        ],
        "operationId": "aliasGetAllAlias",
        "responses": {
          "200": {
            "description": "AliasStructList",
            "schema": {
              "$ref": "#/definitions/AliasStructList"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Adds alias to system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "alias"
        ],
        "operationId": "aliasAddAlias",
        "parameters": [
          {
            "type": "object",
            "description": "AliasStruct parameters",
            "name": "AliasStruct",
            "in": "body",
            "required": true,
            "schema": {
              "description": "AliasStruct parameters",
              "type": "object",
              "$ref": "#/definitions/AliasStruct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AliasCreationSuccessResponse",
            "schema": {
              "$ref": "#/definitions/AliasCreationSuccessResponse"
            }
          },
          "401": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/alias/{guid}": {
      "put": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Update an existing alias based upon the lookup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "alias"
        ],
        "operationId": "aliasUpdateAlias",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the Alias to update",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "uuid of the Alias to update",
              "type": "string"
            }
          },
          {
            "type": "object",
            "description": "AliasStruct parameters",
            "name": "AliasStruct",
            "in": "body",
            "required": true,
            "schema": {
              "description": "AliasStruct parameters",
              "type": "object",
              "$ref": "#/definitions/AliasStruct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AliasUpdateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/AliasUpdateSuccessResponse"
            }
          },
          "401": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "delete an alias based upon guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "alias"
        ],
        "operationId": "aliasDeleteAlias",
        "parameters": [
          {
            "type": "string",
            "description": "guid of the alias to delete",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of the alias to delete",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "AliasDeleteSuccessResponse",
            "schema": {
              "$ref": "#/definitions/AliasDeleteSuccessResponse"
            }
          },
          "401": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/api/v3/proxy/grafana/search/:uid": {
      "get": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "operationId": "search"
      }
    },
    "/auth": {
      "post": {
        "description": "Returns a JWT Token and UUID attached to user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "auth"
        ],
        "operationId": "userLoginUser",
        "parameters": [
          {
            "type": "object",
            "description": "user login structure",
            "name": "userLoginStruct",
            "in": "body",
            "required": true,
            "schema": {
              "description": "user login structure",
              "type": "object",
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UserLoginSuccessResponse",
            "schema": {
              "$ref": "#/definitions/UserLoginSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/auth/type/list": {
      "get": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "JWT": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "ApiKeyAuth": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "name": [
              "Auth-Token"
            ]
          }
        ],
        "description": "Returns data from server",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "operationId": "SuccessResponse",
        "responses": {
          "200": {
            "description": "SuccessResponse",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/call/report/log": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns log data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetTransactionLog",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchTransactionLogList",
            "schema": {
              "$ref": "#/definitions/SearchTransactionLogList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/call/report/qos": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns qos data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetTransactionQos",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchTransactionQos",
            "schema": {
              "$ref": "#/definitions/SearchTransactionQos"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/call/transaction": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns transaction data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetTransaction",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchTransaction",
            "schema": {
              "$ref": "#/definitions/SearchTransaction"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/dashboard/info": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all dashboards",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dashboard"
        ],
        "operationId": "dashboardGetDashBoardLists",
        "responses": {
          "200": {
            "description": "DashboardElementList",
            "schema": {
              "$ref": "#/definitions/DashboardElementList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/dashboard/store/{dashboardId}": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get dashboard by param",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dashboard"
        ],
        "operationId": "dashboardGetDashBoard",
        "parameters": [
          {
            "type": "string",
            "description": "ID of dashboard",
            "name": "dashboard ID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "ID of dashboard",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DashboardElement",
            "schema": {
              "$ref": "#/definitions/DashboardElement"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add dashboard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dashboard"
        ],
        "operationId": "dashboardInsertDashboard",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of dashboard",
            "name": "dashboard ID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "the ID of dashboard",
              "type": "string"
            }
          },
          {
            "type": "object",
            "description": "json of dashboard",
            "name": "dashboard data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "json of dashboard",
              "type": "object",
              "$ref": "#/definitions/DashboardElement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SuccessResponse",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add dashboard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dashboard"
        ],
        "operationId": "dashboardInsertDashboard",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of dashboard",
            "name": "dashboard ID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "the ID of dashboard",
              "type": "string"
            }
          },
          {
            "type": "object",
            "description": "json of dashboard",
            "name": "dashboard data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "json of dashboard",
              "type": "object",
              "$ref": "#/definitions/DashboardElement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SuccessResponse",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Delete dashboard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dashboard"
        ],
        "operationId": "dashboardDeleteDashboard",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of dashboard",
            "name": "dashboard ID",
            "in": "path",
            "required": true,
            "schema": {
              "description": "the ID of dashboard",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SuccessResponse",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/database/node/list": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get mappings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "profile"
        ],
        "operationId": "profileGetDBNodeList",
        "responses": {
          "201": {
            "description": "NodeList",
            "schema": {
              "$ref": "#/definitions/NodeList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/export/call/messages/pcap": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns pcap data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetMessagesAsPCap",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PCAPResponse",
            "schema": {
              "$ref": "#/definitions/PCAPResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/export/call/messages/text": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns text data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetMessagesAsText",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TextResponse",
            "schema": {
              "$ref": "#/definitions/TextResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/hepsub/protocol": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all hepsub",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubGetHepSub",
        "responses": {
          "201": {
            "description": "HepsubSchemaList",
            "schema": {
              "$ref": "#/definitions/HepsubSchemaList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Add new Hepsub information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubAddHepSub",
        "parameters": [
          {
            "type": "object",
            "description": "hepSub parameters",
            "name": "HepsubSchema",
            "in": "body",
            "schema": {
              "description": "hepSub parameters",
              "type": "object",
              "$ref": "#/definitions/HepsubSchema"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HepsubCreateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/HepsubCreateSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/hepsub/protocol/{guid}": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get hepsub by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubGetHepSubAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of item",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of item",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HepsubSchema",
            "schema": {
              "$ref": "#/definitions/HepsubSchema"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Update hepsub by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubUpdateHepSubAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of hepsub item",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of hepsub item",
              "type": "string"
            }
          },
          {
            "type": "object",
            "description": "hepSub parameters",
            "name": "HepsubSchema",
            "in": "body",
            "schema": {
              "description": "hepSub parameters",
              "type": "object",
              "$ref": "#/definitions/HepsubSchema"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HepsubUpdateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/HepsubUpdateSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Delete hepsub by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubDeleteHepSubAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of hepsub item",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of hepsub item",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HepsubDeleteSuccessResponse",
            "schema": {
              "$ref": "#/definitions/HepsubDeleteSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/hepsub/protocol/{id}/{transaction}": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get hepsub by id and transaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubGetHepSubFields",
        "parameters": [
          {
            "type": "string",
            "description": "hepid",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "description": "hepid",
              "type": "string"
            }
          },
          {
            "type": "string",
            "description": "profile",
            "name": "transaction",
            "in": "path",
            "required": true,
            "schema": {
              "description": "profile",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HepsubSchema",
            "schema": {
              "$ref": "#/definitions/HepsubSchema"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/hepsub/search": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Add hepsubsearch item",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "hep"
        ],
        "operationId": "hepSubSearchDoHepsubsearch",
        "responses": {}
      }
    },
    "/import/data/pcap": {
      "post": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "JWT": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "ApiKeyAuth": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "name": [
              "Auth-Token"
            ]
          }
        ],
        "description": "Returns pcap data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Import"
        ],
        "operationId": "GetMessagesAsPCap",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ListUsers",
            "schema": {
              "$ref": "#/definitions/ListUsers"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/import/data/pcap/now": {
      "post": {
        "security": [
          {
            "SecurityDefinitions": []
          },
          {
            "JWT": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "ApiKeyAuth": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "name": [
              "Auth-Token"
            ]
          }
        ],
        "description": "Returns pcap data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Import"
        ],
        "operationId": "GetMessagesAsPCapNow",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ListUsers",
            "schema": {
              "$ref": "#/definitions/ListUsers"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/mapping/protocol": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all mappings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingGetMapping",
        "responses": {
          "201": {
            "description": "MappingSchemaList",
            "schema": {
              "$ref": "#/definitions/MappingSchemaList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          },
          {
            "+ name": [
              "MappingSchema"
            ]
          },
          {
            "in": [
              "body"
            ]
          },
          {
            "description": [
              "Mapping"
            ]
          },
          {
            "schema": []
          },
          {
            "type": [
              "MappingSchema"
            ]
          }
        ],
        "description": "Add mapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingAddMapping",
        "responses": {
          "201": {
            "description": "MappingCreateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/MappingCreateSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/mapping/protocol/{guid}": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get mapping using guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingGetMappingAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of mapping",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of mapping",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MappingSchemaList",
            "schema": {
              "$ref": "#/definitions/MappingSchemaList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Update mapping using guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingUpdateMappingAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of mapping",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of mapping",
              "type": "string"
            }
          },
          {
            "type": "object",
            "description": "Mapping parameters",
            "name": "MappingSchema",
            "in": "body",
            "schema": {
              "description": "Mapping parameters",
              "type": "object",
              "$ref": "#/definitions/MappingSchema"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MappingUpdateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/MappingUpdateSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Delete mapping using guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingDeleteMappingAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "description": "guid of mapping",
            "name": "guid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "guid of mapping",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MappingDeleteSuccessResponse",
            "schema": {
              "$ref": "#/definitions/MappingDeleteSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/mapping/protocol/{id}/{transaction}": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get mapping using id and transaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingGetMappingFields",
        "parameters": [
          {
            "type": "number",
            "description": "hepid",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "description": "hepid",
              "type": "number"
            }
          },
          {
            "type": "string",
            "description": "profile",
            "name": "transaction",
            "in": "path",
            "required": true,
            "schema": {
              "description": "profile",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "MappingSchemaList",
            "schema": {
              "$ref": "#/definitions/MappingSchemaList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/prometheus/data": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "prometheusPrometheusData"
      }
    },
    "/prometheus/label": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "prometheusPrometheusLabelData"
      }
    },
    "/prometheus/labels": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "prometheusPrometheusLabels"
      }
    },
    "/prometheus/value": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "prometheusPrometheusValue"
      }
    },
    "/proxy/grafana/dashboards/uid/{uid}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "grafanaGrafanaGetDashboardAgainstUUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "uid",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/proxy/grafana/folders": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "grafanaGrafanaFolders"
      }
    },
    "/proxy/grafana/org": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "grafanaGrafanaORG"
      }
    },
    "/proxy/grafana/url": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "proxy"
        ],
        "operationId": "grafanaGrafanaURL"
      }
    },
    "/search/call/data": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchSearchData",
        "parameters": [
          {
            "type": "object",
            "description": "SearchTransactionRequest parameters",
            "name": "SearchTransactionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchTransactionRequest parameters",
              "type": "object",
              "$ref": "#/definitions/SearchTransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchCallData",
            "schema": {
              "$ref": "#/definitions/SearchCallData"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/search/call/decode/message": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetDecodeMessageById",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MessageDecoded",
            "schema": {
              "$ref": "#/definitions/MessageDecoded"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/search/call/message": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns message data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "search"
        ],
        "operationId": "searchGetMessageById",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "description": "SearchObject parameters",
              "type": "object",
              "$ref": "#/definitions/SearchObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SearchCallData",
            "schema": {
              "$ref": "#/definitions/SearchCallData"
            }
          },
          "400": {
            "description": "UserLoginFailureResponse",
            "schema": {
              "$ref": "#/definitions/UserLoginFailureResponse"
            }
          }
        }
      }
    },
    "/search/remote/data": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "remote"
        ],
        "operationId": "remoteRemoteData"
      }
    },
    "/search/remote/label": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "remote"
        ],
        "operationId": "remoteRemoteLabel"
      }
    },
    "/search/remote/values": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "remote"
        ],
        "operationId": "remoteRemoteValues"
      }
    },
    "/smart/search/tag/{hepid}/{profile}": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get smart hep profile using hepid and profile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "mapping"
        ],
        "operationId": "mappingGetSmartHepProfile",
        "parameters": [
          {
            "type": "string",
            "description": "hepid",
            "name": "hepid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "hepid",
              "type": "string"
            }
          },
          {
            "type": "string",
            "description": "profile",
            "name": "profile",
            "in": "path",
            "required": true,
            "schema": {
              "description": "profile",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SmartSearchFieldList",
            "schema": {
              "$ref": "#/definitions/SmartSearchFieldList"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/statistic/_db": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statistic"
        ],
        "operationId": "statisticGetStatisticDBList"
      }
    },
    "/statistic/_measurements/{dbid}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statistic"
        ],
        "operationId": "statisticGetStatisticMeasurementsList",
        "parameters": [
          {
            "type": "string",
            "description": "database id",
            "name": "dbid",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/statistic/_metrics": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statistic"
        ],
        "operationId": "statisticGetStatisticMetricsList"
      }
    },
    "/statistic/_retentions": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statistic"
        ],
        "operationId": "statisticGetStatisticRetentionsList"
      }
    },
    "/statistic/_tags": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statistic"
        ],
        "operationId": "statisticGetStatisticTagsList"
      }
    },
    "/statistic/data": {
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns data based upon filtered json",
        "produces": [
          "application/json"
        ],
        "tags": [
          "statistic"
        ],
        "operationId": "statisticStatisticData"
      }
    },
    "/token/auth": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Get all tokens",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "operationId": "authTokenGetAuthtoken",
        "responses": {}
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Add token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "operationId": "authTokenAddAuthToken",
        "parameters": [
          {
            "description": "authToken parameters",
            "name": "authTokenStruct",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        ],
        "responses": {}
      }
    },
    "/token/auth/{guid}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Get token by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "operationId": "authTokenGetAuthtokenAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "guid of token",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      },
      "put": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update token by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "operationId": "authTokenUpdateAuthtokenAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "guid of token",
            "name": "guid",
            "in": "path",
            "required": true
          },
          {
            "description": "authToken parameters",
            "name": "authTokenStruct",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthToken"
            }
          }
        ],
        "responses": {}
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Delete token by guid",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "token"
        ],
        "operationId": "authTokenDeleteAuthtokenAgainstGUID",
        "parameters": [
          {
            "type": "string",
            "example": "eacdae5b-4203-40a2-b388-969312ffcffe",
            "description": "guid of token",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/user/settings": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns the list of settings",
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "operationId": "settingsGetAll",
        "responses": {}
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Adds user settings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "operationId": "settingsAddUserSettings",
        "parameters": [
          {
            "description": "TableUserSettings struct",
            "name": "userSettingsStruct",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          }
        ],
        "responses": {}
      }
    },
    "/user/settings/{category}": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns the list of settings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "operationId": "settingsGetCategory",
        "parameters": [
          {
            "type": "string",
            "example": "dashboard",
            "description": "user settings category",
            "name": "category",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/user/settings/{guid}": {
      "put": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Update user settings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "operationId": "settingsUpdateUserSettings",
        "parameters": [
          {
            "type": "string",
            "example": "11111111-1111-1111-1111-111111111111",
            "description": "guid of user settings",
            "name": "guid",
            "in": "path",
            "required": true
          },
          {
            "description": "TableUserSettings",
            "name": "tableUserSettingsStruct",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          }
        ],
        "responses": {}
      },
      "delete": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Delete user settings",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "settings"
        ],
        "operationId": "settingsDeleteUserSettings",
        "parameters": [
          {
            "type": "string",
            "example": "11111111-1111-1111-1111-111111111111",
            "description": "guid of user settings",
            "name": "guid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {}
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Returns the list of Users",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "operationId": "userGetUser",
        "responses": {
          "200": {
            "description": "ListUsers",
            "schema": {
              "$ref": "#/definitions/ListUsers"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Create a New user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "operationId": "userCreateUser",
        "parameters": [
          {
            "type": "object",
            "description": "user structure",
            "name": "CreateUserStruct",
            "in": "body",
            "required": true,
            "schema": {
              "description": "user structure",
              "type": "object",
              "$ref": "#/definitions/CreateUserStruct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UserCreateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/UserCreateSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/users/{userGuid}": {
      "put": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Update an existing user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "operationId": "userUpdateUser",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the user to update",
            "name": "userGuid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "uuid of the user to update",
              "type": "string"
            }
          },
          {
            "description": "user parameters",
            "name": "createUserStruct",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "UserUpdateSuccessResponse",
            "schema": {
              "$ref": "#/definitions/UserUpdateSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearer": [
              "[]"
            ]
          },
          {
            "SecurityDefinitions": []
          },
          {
            "bearer": []
          },
          {
            "type": [
              "apiKey"
            ]
          },
          {
            "name": [
              "Authorization"
            ]
          },
          {
            "in": [
              "header"
            ]
          }
        ],
        "description": "Delete an existing User",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "operationId": "userDeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "uuid of the user to update",
            "name": "userGuid",
            "in": "path",
            "required": true,
            "schema": {
              "description": "uuid of the user to update",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "UserDeleteSuccessResponse",
            "schema": {
              "$ref": "#/definitions/UserDeleteSuccessResponse"
            }
          },
          "400": {
            "description": "FailureResponse",
            "schema": {
              "$ref": "#/definitions/FailureResponse"
            }
          }
        }
      }
    },
    "/ws": {
      "get": {
        "description": "Returns data based upon filtered json",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "WebSocket",
        "parameters": [
          {
            "type": "object",
            "description": "SearchObject parameters",
            "name": "SearchObject",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchCallData"
            }
          }
        ],
        "responses": {}
      }
    }
  },
  "definitions": {
    "AgentsLocation": {
      "type": "object",
      "properties": {
        "active": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Active"
        },
        "create_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "expire_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpireDate"
        },
        "gid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Gid"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "node": {
          "type": "string",
          "x-go-name": "Node"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        },
        "ttl": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TTL"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "uuid": {
          "type": "string",
          "x-go-name": "GUID"
        }
      },
      "x-go-name": "TableAgentLocationSession",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AgentsLocationList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentsLocation"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-name": "TableAgentLocationSessionList",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AliasCreationSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "f2d0a540-bf21-4c0d-ac73-8696ea10855a"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully created alias"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AliasDeleteSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "f2d0a540-bf21-4c0d-ac73-8696ea10855a"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully deleted alias"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AliasStruct": {
      "type": "object",
      "required": [
        "alias",
        "ip",
        "port",
        "mask",
        "captureID"
      ],
      "properties": {
        "alias": {
          "description": "alias name",
          "type": "string",
          "x-go-name": "Alias",
          "example": "verizon"
        },
        "captureID": {
          "type": "string",
          "x-go-name": "CaptureID",
          "example": "0"
        },
        "guid": {
          "type": "string",
          "x-go-name": "GUID"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "ip": {
          "type": "string",
          "x-go-name": "IP",
          "example": "192.168.10.20"
        },
        "mask": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Mask",
          "example": 32
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port",
          "example": 5060
        },
        "status": {
          "type": "boolean",
          "x-go-name": "Status"
        }
      },
      "x-go-name": "TableAlias",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AliasStructList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AliasStruct"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-name": "TableAliasList",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AliasUpdateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "f2d0a540-bf21-4c0d-ac73-8696ea10855a"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully updated alias"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "AuthToken": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "create_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "creator_guid": {
          "type": "string",
          "x-go-name": "UserGUID"
        },
        "expire_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpireDate"
        },
        "guid": {
          "type": "string",
          "x-go-name": "GUID"
        },
        "ip_address": {
          "type": "string",
          "x-go-name": "IPAddress"
        },
        "lastusage_date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastUsageDate"
        },
        "limit_calls": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LimitCalls"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "usage_calls": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UsageCalls"
        },
        "user_object": {
          "type": "object",
          "x-go-name": "UserObject"
        }
      },
      "x-go-name": "TableAuthToken",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "CallElement": {
      "type": "object",
      "properties": {
        "aliasDst": {
          "type": "string",
          "x-go-name": "AliasDst",
          "example": "Support"
        },
        "aliasSrc": {
          "type": "string",
          "x-go-name": "AliasSrc",
          "example": "Client"
        },
        "create_date": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreateDate",
          "example": 1633374982350
        },
        "destination": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Destination",
          "example": 1
        },
        "dstHost": {
          "type": "string",
          "x-go-name": "DstHost",
          "example": "179.12.245.132"
        },
        "dstId": {
          "type": "string",
          "x-go-name": "DstID",
          "example": "179.12.245.132:5060"
        },
        "dstIp": {
          "type": "string",
          "x-go-name": "DstIP",
          "example": "179.12.245.132"
        },
        "dstPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "DstPort",
          "example": 5060
        },
        "id": {
          "type": "number",
          "format": "double",
          "x-go-name": "ID",
          "example": 5162
        },
        "method": {
          "type": "string",
          "x-go-name": "Method",
          "example": "INVITE"
        },
        "method_text": {
          "type": "string",
          "x-go-name": "MethodText",
          "example": "INVITE"
        },
        "micro_ts": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MicroTs",
          "example": 1633374982350
        },
        "msg_color": {
          "type": "string",
          "x-go-name": "MsgColor",
          "example": "blue"
        },
        "protocol": {
          "type": "number",
          "format": "double",
          "x-go-name": "Protocol",
          "example": 17
        },
        "ruri_user": {
          "type": "string",
          "x-go-name": "RuriUser",
          "example": "INVITE sip:155@example.com;user=phone SIP/2.0\\r\\n"
        },
        "sid": {
          "type": "string",
          "x-go-name": "Sid",
          "example": "wvn6zg@127.0.0.1"
        },
        "srcHost": {
          "type": "string",
          "x-go-name": "SrcHost",
          "example": "18.12.245.132"
        },
        "srcId": {
          "type": "string",
          "x-go-name": "SrcID",
          "example": "18.12.245.132:5060"
        },
        "srcIp": {
          "type": "string",
          "x-go-name": "SrcIP",
          "example": "18.12.245.132"
        },
        "srcPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "SrcPort",
          "example": 5060
        },
        "table": {
          "type": "string",
          "x-go-name": "Table"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "CreateUserStruct": {
      "type": "object",
      "required": [
        "username",
        "partid",
        "email",
        "password",
        "lastname",
        "department",
        "usergroup",
        "guid"
      ],
      "properties": {
        "department": {
          "type": "string",
          "x-go-name": "Department",
          "example": "NOC"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "firstname": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "guid": {
          "description": "should be a unique value representing user",
          "type": "string",
          "x-go-name": "GUID",
          "example": "e71771a2-1ea0-498f-8d27-391713e10664"
        },
        "lastname": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "partid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PartId",
          "example": 10
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "usergroup": {
          "type": "string",
          "x-go-name": "UserGroup",
          "example": "admin"
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-name": "TableUser",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "DashboardElement": {
      "type": "object",
      "properties": {
        "cssclass": {
          "type": "string",
          "x-go-name": "CssClass",
          "example": "fa"
        },
        "href": {
          "type": "string",
          "x-go-name": "Href",
          "example": "_1631547759877"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id",
          "example": "_1631547759877"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "Search"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner",
          "example": "admin"
        },
        "param": {
          "type": "string",
          "x-go-name": "Param",
          "example": "search"
        },
        "shared": {
          "type": "boolean",
          "x-go-name": "Shared",
          "example": false
        },
        "type": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Type",
          "example": 1
        },
        "weight": {
          "type": "number",
          "format": "double",
          "x-go-name": "Weight",
          "example": 10
        }
      },
      "x-go-name": "DashBoardElement",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "DashboardElementList": {
      "type": "object",
      "properties": {
        "auth": {
          "type": "string",
          "x-go-name": "Auth",
          "example": "ok"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardElement"
          },
          "x-go-name": "Data"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status",
          "example": "ok"
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total",
          "example": 1
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "FailureResponse": {
      "type": "object",
      "properties": {
        "error": {
          "description": "errot",
          "type": "string",
          "x-go-name": "Error"
        },
        "message": {
          "description": "message",
          "type": "string",
          "x-go-name": "Message"
        },
        "statuscode": {
          "description": "statuscode",
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        }
      },
      "x-go-name": "UserTokenBadResponse",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "File": {
      "type": "object",
      "title": "File represents an open file descriptor.",
      "x-go-package": "os"
    },
    "GlobalSettingsStruct": {
      "type": "object",
      "required": [
        "guid",
        "partid",
        "category",
        "param"
      ],
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category",
          "example": "profile"
        },
        "data": {
          "type": "object",
          "x-go-name": "Data"
        },
        "guid": {
          "description": "should be a unique value representing user",
          "type": "string",
          "x-go-name": "GUID",
          "example": "e71771a2-1ea0-498f-8d27-391713e10664"
        },
        "param": {
          "type": "string",
          "x-go-name": "Param",
          "example": "homer"
        },
        "partid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PartId",
          "example": 1
        }
      },
      "x-go-name": "TableGlobalSettings",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "GlobalSettingsStructList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GlobalSettingsStruct"
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "HepsubCreateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully created hepsub settings"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "HepsubDeleteSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully deleted hepsub settings"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "HepsubSchema": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "x-go-name": "GUID",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "hep_alias": {
          "type": "string",
          "x-go-name": "HepAlias",
          "example": "SIP"
        },
        "hepid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hepid",
          "example": 1
        },
        "mapping": {
          "type": "object",
          "x-go-name": "Mapping"
        },
        "profile": {
          "type": "string",
          "x-go-name": "Profile",
          "example": "call"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version",
          "example": 1603221345489
        }
      },
      "x-go-name": "TableHepsubSchema",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "HepsubSchemaList": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HepsubSchema"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "HepsubUpdateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully updated hepsub settings"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "LabelData": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LabelData"
          },
          "x-go-name": "Entries"
        },
        "labels": {
          "type": "object",
          "x-go-name": "Labels"
        }
      },
      "x-go-name": "streamsResult",
      "x-go-package": "github.com/sipcapture/homer-app/data/service"
    },
    "ListUsers": {
      "type": "object",
      "properties": {
        "count": {
          "description": "count",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "data": {
          "description": "the data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateUserStruct"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-name": "GetUser",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "MappingCreateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully created mapping settings"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "MappingDeleteSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully deleted mapping settings"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "MappingSchema": {
      "type": "object",
      "properties": {
        "correlation_mapping": {
          "type": "object",
          "x-go-name": "CorrelationMapping"
        },
        "create_index": {
          "type": "object",
          "x-go-name": "CreateIndex"
        },
        "create_table": {
          "type": "string",
          "x-go-name": "CreateTable",
          "example": "CREATE TABLE test(id integer, data text);"
        },
        "fields_mapping": {
          "type": "object",
          "x-go-name": "FieldsMapping"
        },
        "fields_settings": {
          "type": "object",
          "x-go-name": "MappingSettings"
        },
        "guid": {
          "type": "string",
          "x-go-name": "GUID",
          "example": "a006a250-c261-4052-b1c2-6cb85ed580c2"
        },
        "hep_alias": {
          "type": "string",
          "x-go-name": "HepAlias",
          "example": "SIP"
        },
        "hepid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Hepid",
          "example": 1
        },
        "partid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PartID",
          "example": 10
        },
        "partition_step": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PartitionStep",
          "example": 10
        },
        "profile": {
          "type": "string",
          "x-go-name": "Profile",
          "example": "call"
        },
        "retention": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Retention",
          "example": 10
        },
        "schema_mapping": {
          "type": "object",
          "x-go-name": "SchemaMapping"
        },
        "schema_settings": {
          "type": "object",
          "x-go-name": "SchemaSettings"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version",
          "example": 1
        }
      },
      "x-go-name": "TableMappingSchema",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "MappingSchemaList": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MappingSchema"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "MappingUpdateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "4b855914-ca3d-4562-8563-f2b660fe2636"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully updated mapping settings"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "MessageDecoded": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "decoded": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_source": {
                      "type": "object",
                      "properties": {
                        "_layers": {
                          "type": "object",
                          "properties": {
                            "eth": {
                              "type": "object",
                              "properties": {
                                "eth.dst": {
                                  "type": "string",
                                  "x-go-name": "Dst",
                                  "example": "06:3d:20:12:10:20"
                                },
                                "eth.dst_tree": {
                                  "type": "object",
                                  "properties": {
                                    "eth.addr": {
                                      "type": "string",
                                      "x-go-name": "Add",
                                      "example": "06:3d:20:12:10:20"
                                    },
                                    "eth.addr_resolved": {
                                      "type": "string",
                                      "x-go-name": "Addr_resolved",
                                      "example": "06:3d:20:12:10:20"
                                    },
                                    "eth.dst_resolved": {
                                      "type": "string",
                                      "x-go-name": "Dst_resolved",
                                      "example": "06:3d:20:12:10:20"
                                    },
                                    "eth.ig": {
                                      "type": "string",
                                      "x-go-name": "Ig",
                                      "example": "0"
                                    },
                                    "eth.lg": {
                                      "type": "string",
                                      "x-go-name": "Lg",
                                      "example": "1"
                                    }
                                  },
                                  "x-go-name": "Dst_tree"
                                },
                                "eth.src": {
                                  "type": "string",
                                  "x-go-name": "Src",
                                  "example": "02:5d:69:74:20:12"
                                },
                                "eth.src_tree": {
                                  "type": "object",
                                  "properties": {
                                    "eth.addr": {
                                      "type": "string",
                                      "x-go-name": "Addr",
                                      "example": "02:5d:69:74:20:12"
                                    },
                                    "eth.addr_resolved": {
                                      "type": "string",
                                      "x-go-name": "Addr_resolved",
                                      "example": "02:5d:69:74:20:12"
                                    },
                                    "eth.ig": {
                                      "type": "string",
                                      "x-go-name": "Ig",
                                      "example": "0"
                                    },
                                    "eth.lg": {
                                      "type": "string",
                                      "x-go-name": "Lg",
                                      "example": "1"
                                    },
                                    "src_resolved": {
                                      "type": "string",
                                      "x-go-name": "Src_resolved",
                                      "example": "02:5d:69:74:20:12"
                                    }
                                  },
                                  "x-go-name": "Src_tree"
                                },
                                "eth.type": {
                                  "type": "string",
                                  "x-go-name": "Type",
                                  "example": "\"0x00000800\""
                                }
                              },
                              "x-go-name": "Eth"
                            },
                            "frame": {
                              "type": "object",
                              "properties": {
                                "frame.cap_len": {
                                  "type": "string",
                                  "x-go-name": "Cap_len",
                                  "example": "1058"
                                },
                                "frame.encap_type": {
                                  "type": "string",
                                  "x-go-name": "Encap_type",
                                  "example": "1"
                                },
                                "frame.ignored": {
                                  "type": "string",
                                  "x-go-name": "Ignored",
                                  "example": "0"
                                },
                                "frame.interface_id": {
                                  "type": "string",
                                  "x-go-name": "Interface_id",
                                  "example": "0"
                                },
                                "frame.interface_id_tree": {
                                  "type": "object",
                                  "properties": {
                                    "frame.interface_name": {
                                      "type": "string",
                                      "x-go-name": "Interface_name",
                                      "example": "-"
                                    }
                                  },
                                  "x-go-name": "Interface_id_tree"
                                },
                                "frame.len": {
                                  "type": "string",
                                  "x-go-name": "Len",
                                  "example": "1058"
                                },
                                "frame.marked": {
                                  "type": "string",
                                  "x-go-name": "Marked",
                                  "example": "0"
                                },
                                "frame.number": {
                                  "type": "string",
                                  "x-go-name": "Number",
                                  "example": "1"
                                },
                                "frame.offset_shift": {
                                  "type": "string",
                                  "x-go-name": "Offset_shift",
                                  "example": "0.000000000"
                                },
                                "frame.protocols": {
                                  "type": "string",
                                  "x-go-name": "Protocols",
                                  "example": "eth:ethertype:ip:udp:sip:sdp"
                                },
                                "frame.time": {
                                  "type": "string",
                                  "x-go-name": "Time",
                                  "example": "Sep 30, 2021 07:06:10.950000000 UTC"
                                },
                                "frame.time_delta": {
                                  "type": "string",
                                  "x-go-name": "Time_delta",
                                  "example": "0.000000000"
                                },
                                "frame.time_delta_displayed": {
                                  "type": "string",
                                  "x-go-name": "Time_delta_displayed",
                                  "example": "0.000000000"
                                },
                                "frame.time_epoch": {
                                  "type": "string",
                                  "x-go-name": "Time_epoch",
                                  "example": "1632985570.950000000"
                                },
                                "frame.time_relative": {
                                  "type": "string",
                                  "x-go-name": "Time_relative",
                                  "example": "0.000000000"
                                }
                              },
                              "x-go-name": "Frame"
                            },
                            "ip": {
                              "type": "object",
                              "properties": {
                                "ip.checksum": {
                                  "type": "string",
                                  "x-go-name": "Checksum",
                                  "example": "0x0000ffa5"
                                },
                                "ip.checksum.status": {
                                  "type": "string",
                                  "x-go-name": "ChceksumStatus",
                                  "example": "2"
                                },
                                "ip.dsfield": {
                                  "type": "string",
                                  "x-go-name": "Dsfield",
                                  "example": "0x0000ffa5"
                                },
                                "ip.dsfield_tree": {
                                  "type": "object",
                                  "properties": {
                                    "ip.dsfield_tree.dscp": {
                                      "type": "string",
                                      "x-go-name": "Dscp",
                                      "example": "0"
                                    },
                                    "ip.dsfield_tree.ecn": {
                                      "type": "string",
                                      "x-go-name": "Ecn",
                                      "example": "0"
                                    }
                                  },
                                  "x-go-name": "Dsfield_tree"
                                },
                                "ip.dst": {
                                  "type": "string",
                                  "x-go-name": "Dst",
                                  "example": "127.0.0.1"
                                },
                                "ip.dst_host": {
                                  "type": "string",
                                  "x-go-name": "Dst_host",
                                  "example": "127.0.0.1"
                                },
                                "ip.flags": {
                                  "type": "string",
                                  "x-go-name": "Flags",
                                  "example": "0x00000000"
                                },
                                "ip.flags_tree": {
                                  "type": "object",
                                  "properties": {
                                    "ip.flags_tree.df": {
                                      "type": "string",
                                      "x-go-name": "Df",
                                      "example": "0"
                                    },
                                    "ip.flags_tree.mf": {
                                      "type": "string",
                                      "x-go-name": "Mf",
                                      "example": "0"
                                    },
                                    "ip.flags_tree.rb": {
                                      "type": "string",
                                      "x-go-name": "Rb",
                                      "example": "0"
                                    }
                                  },
                                  "x-go-name": "Flags_tree"
                                },
                                "ip.frag_offset": {
                                  "type": "string",
                                  "x-go-name": "Frag_offset",
                                  "example": "0"
                                },
                                "ip.hdr_len": {
                                  "type": "string",
                                  "x-go-name": "Hdr_len",
                                  "example": "20"
                                },
                                "ip.host": {
                                  "type": "string",
                                  "x-go-name": "Host",
                                  "example": "127.0.0.1"
                                },
                                "ip.id": {
                                  "type": "string",
                                  "x-go-name": "Id",
                                  "example": "0x00000000"
                                },
                                "ip.len": {
                                  "type": "string",
                                  "x-go-name": "Len",
                                  "example": "1044"
                                },
                                "ip.proto": {
                                  "type": "string",
                                  "x-go-name": "Proto",
                                  "example": "17"
                                },
                                "ip.src": {
                                  "type": "string",
                                  "x-go-name": "Src",
                                  "example": "127.0.0.1"
                                },
                                "ip.src_host": {
                                  "type": "string",
                                  "x-go-name": "Src_host",
                                  "example": "127.0.0.1"
                                },
                                "ip.ttl": {
                                  "type": "string",
                                  "x-go-name": "Ttl",
                                  "example": "54"
                                },
                                "ip.version": {
                                  "type": "string",
                                  "x-go-name": "Version",
                                  "example": "4"
                                }
                              },
                              "x-go-name": "Ip"
                            },
                            "sip": {
                              "type": "object",
                              "properties": {
                                "sip.Request-line": {
                                  "type": "string",
                                  "x-go-name": "Request_line",
                                  "example": "INVITE sip:196@example.com;user=phone SIP/2.0"
                                },
                                "sip.Request-line_tree": {
                                  "type": "object",
                                  "properties": {
                                    "sip.Method": {
                                      "type": "string",
                                      "x-go-name": "Method",
                                      "example": "INVITE"
                                    },
                                    "sip.Request-line_tree": {
                                      "type": "object",
                                      "properties": {
                                        "sip.r-uri.host": {
                                          "type": "string",
                                          "x-go-name": "Host",
                                          "example": "example.com"
                                        },
                                        "sip.r-uri.user": {
                                          "type": "string",
                                          "x-go-name": "User",
                                          "example": "196"
                                        }
                                      },
                                      "x-go-name": "Ruri_tree"
                                    },
                                    "sip.r-uri": {
                                      "type": "string",
                                      "x-go-name": "Ruri",
                                      "example": "sip:196@example.com;user=phone"
                                    },
                                    "sip.resend": {
                                      "type": "string",
                                      "x-go-name": "Resend",
                                      "example": "0"
                                    }
                                  },
                                  "x-go-name": "Request_line_tree"
                                },
                                "sip.msg_body": {
                                  "type": "object",
                                  "properties": {
                                    "sdp.connection_info": {
                                      "type": "string",
                                      "x-go-name": "Connection_info",
                                      "example": "\"IN IP4 192.168.10.193\""
                                    },
                                    "sdp.media": {
                                      "type": "string",
                                      "x-go-name": "Media",
                                      "example": "audio 5004 RTP/AVP 0 8 9 18 101"
                                    },
                                    "sdp.media_attr": {
                                      "type": "string",
                                      "x-go-name": "Media_attr",
                                      "example": "fmtp:101 0-15"
                                    },
                                    "sdp.media_attr_tree": {
                                      "type": "object",
                                      "properties": {
                                        "sdp.fmtp.parameter": {
                                          "type": "string",
                                          "x-go-name": "Parameter",
                                          "example": "0-15"
                                        },
                                        "sdp.media.format": {
                                          "type": "string",
                                          "x-go-name": "Format",
                                          "example": "101"
                                        },
                                        "sdp.media_attribute.field": {
                                          "type": "string",
                                          "x-go-name": "Field",
                                          "example": "fmtp"
                                        }
                                      },
                                      "x-go-name": "Media_attr_tree"
                                    },
                                    "sdp.media_tree": {
                                      "type": "object",
                                      "properties": {
                                        "sdp.media.format": {
                                          "type": "string",
                                          "x-go-name": "Fromat",
                                          "example": "DynamicRTP-Type-101"
                                        },
                                        "sdp.media.media": {
                                          "type": "string",
                                          "x-go-name": "Media",
                                          "example": "audio"
                                        },
                                        "sdp.media.port": {
                                          "type": "string",
                                          "x-go-name": "Port",
                                          "example": "5004"
                                        },
                                        "sdp.media.port_string": {
                                          "type": "string",
                                          "x-go-name": "Port_string",
                                          "example": "5004"
                                        },
                                        "sdp.media.proto": {
                                          "type": "string",
                                          "x-go-name": "Proto",
                                          "example": "RTP/AVP"
                                        }
                                      },
                                      "x-go-name": "Media_tree"
                                    },
                                    "sdp.owner": {
                                      "type": "string",
                                      "x-go-name": "Owner",
                                      "example": "hepgenjs 8000 8000 IN IP4 192.168.10.193"
                                    },
                                    "sdp.owner_tree": {
                                      "type": "object",
                                      "properties": {
                                        "sdp.owner.address": {
                                          "type": "string",
                                          "x-go-name": "Address",
                                          "example": "192.168.10.193"
                                        },
                                        "sdp.owner.address_type": {
                                          "type": "string",
                                          "x-go-name": "Address_type",
                                          "example": "IP4"
                                        },
                                        "sdp.owner.network_type": {
                                          "type": "string",
                                          "x-go-name": "Network_type",
                                          "example": "IN"
                                        },
                                        "sdp.owner.sessionid": {
                                          "type": "string",
                                          "x-go-name": "SessionID",
                                          "example": "8000"
                                        },
                                        "sdp.owner.username": {
                                          "type": "string",
                                          "x-go-name": "Username",
                                          "example": "hepgenjs"
                                        },
                                        "sdp.owner.version": {
                                          "type": "string",
                                          "x-go-name": "Version",
                                          "example": "8000"
                                        }
                                      },
                                      "x-go-name": "Owner_tree"
                                    },
                                    "sdp.session_name": {
                                      "type": "string",
                                      "x-go-name": "Session_name",
                                      "example": "\"SIP Call\""
                                    },
                                    "sdp.time": {
                                      "type": "string",
                                      "x-go-name": "Time",
                                      "example": "\"0 0\""
                                    },
                                    "sdp.time_tree": {
                                      "type": "object",
                                      "properties": {
                                        "sdp.time.start": {
                                          "type": "string",
                                          "x-go-name": "Start",
                                          "example": "0"
                                        },
                                        "sdp.time.stop": {
                                          "type": "string",
                                          "x-go-name": "Stop",
                                          "example": "0"
                                        }
                                      },
                                      "x-go-name": "Time_tree"
                                    },
                                    "sdp.version": {
                                      "type": "string",
                                      "x-go-name": "Version",
                                      "example": "0"
                                    },
                                    "sip.connection_info_tree": {
                                      "type": "object",
                                      "properties": {
                                        "sdp.connection_info.address": {
                                          "type": "string",
                                          "x-go-name": "Address",
                                          "example": "192.168.10.193"
                                        },
                                        "sdp.connection_info.address_type": {
                                          "type": "string",
                                          "x-go-name": "Address_type",
                                          "example": "IP4"
                                        },
                                        "sdp.connection_info.network_type": {
                                          "type": "string",
                                          "x-go-name": "Network_type",
                                          "example": "IN"
                                        }
                                      },
                                      "x-go-name": "Connection_info_tree"
                                    }
                                  },
                                  "x-go-name": "Msg_body"
                                },
                                "sip.msg_hdr": {
                                  "type": "string",
                                  "x-go-name": "Msg_hdr",
                                  "example": "\"Via: SIP/2.0/UDP 192.168.10.193:5064;branch=z9hG4bK923381359;rport\\r\\nFrom: \u003csip:hepgenjs@example.com;user=phone\u003e;tag=415746302\\r\\nTo: \u003csip:196@example.com;user=phone\u003e\\r\\nCall-ID: a6xh18@127.0.0.1\\r\\nCSeq: 440 INVITE\\r\\nContact: \u003csip:hepgenjs@192.168.10.193:5064;user=phone\u003e\\r\\nMax-Forwards: 70\\r\\nUser-Agent: HEPGEN.JS@example.com\\r\\nPrivacy: none\\r\\nP-Preferred-Identity: \u003csip:hepgenjs@example.com;user=phone\u003e\\r\\nSupported: replaces, path, timer, eventlist\\r\\nAllow: INVITE, ACK, OPTIONS, CANCEL, BYE, SUBSCRIBE, NOTIFY, INFO, REFER, UPDATE, MESSAGE\\r\\nContent-Type: application/sdp\\r\\nAccept: application/sdp, application/dtmf-relay\\r\\nContent-Length:   313\\r\\n\\r\\nv=0\\r\\no=hepgenjs 8000 8000 IN IP4 192.168.10.193\\r\\ns=SIP Call\\r\\nc=IN IP4 192.168.10.193\\r\\nt=0 0\\r\\nm=audio 5004 RTP/AVP 0 8 9 18 101\\r\\na=sendrecv\\r\\na=rtpmap:0 PCMU/8000\\r\\na=ptime:20\\r\\na=rtpmap:8 PCMA/8000\\r\\na=rtpmap:9 G722/8000\\r\\na=rtpmap:18 G729/8000\\r\\na=fmtp:18 annexb=no\\r\\na=rtpmap:101 telephone-event/8000\\r\\na=fmtp:101 0-15\\r\\n\\r\\n\\r\\n\""
                                },
                                "sip.msg_hdr_tree": {
                                  "type": "object",
                                  "x-go-name": "RMsg_hdr_tree"
                                }
                              },
                              "x-go-name": "Sip"
                            },
                            "udp": {
                              "type": "object",
                              "properties": {
                                "udp.checksum": {
                                  "type": "string",
                                  "x-go-name": "Checksum",
                                  "example": "0x0000ffa5"
                                },
                                "udp.checksum.status": {
                                  "type": "string",
                                  "x-go-name": "ChceksumStatus",
                                  "example": "2"
                                },
                                "udp.dstport": {
                                  "type": "string",
                                  "x-go-name": "Dstport",
                                  "example": "5060"
                                },
                                "udp.length": {
                                  "type": "string",
                                  "x-go-name": "Length",
                                  "example": "1024"
                                },
                                "udp.port": {
                                  "type": "string",
                                  "x-go-name": "Port",
                                  "example": "5060"
                                },
                                "udp.srcport": {
                                  "type": "string",
                                  "x-go-name": "Srcport",
                                  "example": "5060"
                                },
                                "udp.stream": {
                                  "type": "string",
                                  "x-go-name": "Stream",
                                  "example": "0"
                                }
                              },
                              "x-go-name": "Udp"
                            }
                          },
                          "x-go-name": "Layers"
                        }
                      },
                      "x-go-name": "Source"
                    },
                    "_type": {
                      "type": "string",
                      "x-go-name": "Type",
                      "example": "pcap_file"
                    }
                  }
                },
                "x-go-name": "Decoded"
              }
            }
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "Node": {
      "type": "object",
      "properties": {
        "arhive": {
          "type": "boolean",
          "x-go-name": "Arhive",
          "example": false
        },
        "db_archive": {
          "type": "string",
          "x-go-name": "Db_archive",
          "example": "hepic_archive"
        },
        "db_name": {
          "type": "string",
          "x-go-name": "Db_name",
          "example": "hepic_data"
        },
        "host": {
          "type": "string",
          "x-go-name": "Host",
          "example": "148.251.238.121"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "DE7 Node"
        },
        "node": {
          "type": "string",
          "x-go-name": "Node",
          "example": "\"\""
        },
        "online": {
          "type": "boolean",
          "x-go-name": "Online",
          "example": true
        },
        "primary": {
          "type": "boolean",
          "x-go-name": "Primary",
          "example": false
        },
        "table_prefix": {
          "type": "string",
          "x-go-name": "Table_prefix"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value",
          "example": "de7node"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "NodeList": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "PCAPResponse": {
      "type": "object",
      "properties": {
        "File": {
          "$ref": "#/definitions/File"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchCallData": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallElement"
          },
          "x-go-name": "Data"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Keys",
          "example": [
            "callid",
            "srcIp",
            "srcPort"
          ]
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total",
          "example": 45
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchObject": {
      "type": "object",
      "required": [
        "param"
      ],
      "properties": {
        "param": {
          "type": "object",
          "required": [
            "limit"
          ],
          "properties": {
            "limit": {
              "description": "this controls the number of records to display",
              "type": "integer",
              "format": "int64",
              "x-go-name": "Limit",
              "example": 200
            },
            "location": {
              "description": "location",
              "type": "object",
              "properties": {
                "node": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Node"
                }
              },
              "x-go-name": "Location"
            },
            "orlogic": {
              "description": "this control the type of search one can perform\ntype: boolean",
              "type": "boolean",
              "x-go-name": "OrLogic",
              "example": false
            },
            "search": {
              "description": "this control the type of search one can perform\ntype: string\nformat: binary",
              "type": "object",
              "x-go-name": "Search",
              "example": "`{\"1_call\":[{\"name\":\"limit\",\"value\":\"10\",\"type\":\"string\",\"hepid\":1}]}`"
            },
            "timezone": {
              "description": "timezone settings\ntype: object",
              "type": "object",
              "default": null,
              "properties": {
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                },
                "value": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Value"
                }
              },
              "x-go-name": "Timezone"
            },
            "transaction": {
              "type": "object",
              "x-go-name": "Transaction"
            },
            "whitelist": {
              "description": "ips to be removed from search",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "WhiteList",
              "example": [
                "192.1698.10.20"
              ]
            }
          },
          "x-go-name": "Param"
        },
        "timestamp": {
          "description": "this control the time range for used for search",
          "type": "object",
          "required": [
            "from",
            "to"
          ],
          "properties": {
            "from": {
              "description": "current timestamp in miliseconds",
              "type": "integer",
              "format": "int64",
              "x-go-name": "From",
              "example": 1581793200000
            },
            "to": {
              "description": "current timestamp in miliseconds",
              "type": "integer",
              "format": "int64",
              "x-go-name": "To",
              "example": 1581879599000
            }
          },
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransaction": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "alias": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-go-name": "Alias",
              "example": "{127.0.0.1: localhost, 100.20.15.1: party1}"
            },
            "calldata": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CallElement"
              },
              "x-go-name": "Calldata"
            }
          },
          "x-go-name": "Data"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Keys",
          "example": [
            "callid",
            "srcIp",
            "srcPort"
          ]
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionLog": {
      "type": "object",
      "properties": {
        "captureId": {
          "type": "string",
          "x-go-name": "CaptureID",
          "example": "\"2001\""
        },
        "capturePass": {
          "type": "string",
          "x-go-name": "CapturePass",
          "example": "myHep"
        },
        "correlation_id": {
          "type": "string",
          "x-go-name": "Correlation_id",
          "example": "wvn6zg@127.0.0.1"
        },
        "create_date": {
          "type": "string",
          "x-go-name": "Create_date",
          "example": "021-10-04T19:16:22.699Z"
        },
        "dbnode": {
          "type": "string",
          "x-go-name": "Dbnode",
          "example": "localnode"
        },
        "dstIp": {
          "type": "string",
          "x-go-name": "DstIP",
          "example": "127.0.0.1"
        },
        "dstPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "DstPort",
          "example": 5060
        },
        "id": {
          "type": "number",
          "format": "double",
          "x-go-name": "ID",
          "example": 1030
        },
        "node": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Node",
          "example": [
            "2001",
            "localnode"
          ]
        },
        "payloadType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PayloadType",
          "example": 100
        },
        "profile": {
          "type": "string",
          "x-go-name": "Profile"
        },
        "proto": {
          "type": "string",
          "x-go-name": "Proto",
          "example": "log"
        },
        "protocol": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Protocol",
          "example": 17
        },
        "protocolFamily": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProtocolFamily",
          "example": 2
        },
        "raw": {
          "type": "string",
          "x-go-name": "Raw"
        },
        "sid": {
          "type": "string",
          "x-go-name": "Sid",
          "example": "wvn6zg@127.0.0.1"
        },
        "srcIp": {
          "type": "string",
          "x-go-name": "SrcIP",
          "example": "127.0.0.1"
        },
        "srcPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "SrcPort",
          "example": 5080
        },
        "timeSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeSeconds",
          "example": 1633374982
        },
        "timeUseconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeUseconds",
          "example": 699000
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionLogList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchTransactionLog"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionQos": {
      "type": "object",
      "properties": {
        "rtcp": {
          "$ref": "#/definitions/SearchTransactionRtpList"
        },
        "rtp": {
          "$ref": "#/definitions/SearchTransactionRtpList"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionRequest": {
      "type": "object",
      "required": [
        "param"
      ],
      "properties": {
        "config": {
          "type": "object",
          "properties": {
            "protocol_id": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "x-go-name": "Name",
                  "example": "SIP"
                },
                "value": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Value",
                  "example": 1
                }
              },
              "x-go-name": "Protocol_id"
            },
            "protocol_profile": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "x-go-name": "Name",
                  "example": "call"
                },
                "value": {
                  "type": "string",
                  "x-go-name": "Value",
                  "example": "call"
                }
              },
              "x-go-name": "Protocol_profile"
            }
          },
          "x-go-name": "Config"
        },
        "param": {
          "type": "object",
          "required": [
            "limit"
          ],
          "properties": {
            "limit": {
              "description": "this controls the number of records to display",
              "type": "integer",
              "format": "int64",
              "x-go-name": "Limit",
              "example": 200
            },
            "location": {
              "description": "location",
              "type": "object",
              "properties": {
                "node": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "Node"
                }
              },
              "x-go-name": "Location"
            },
            "orlogic": {
              "description": "this control the type of search one can perform\ntype: boolean",
              "type": "boolean",
              "x-go-name": "OrLogic",
              "example": false
            },
            "search": {
              "description": "this control the type of search one can perform\ntype: string\nformat: binary",
              "type": "object",
              "x-go-name": "Search",
              "example": "`{\"1_call\":[{\"name\":\"limit\",\"value\":\"10\",\"type\":\"string\",\"hepid\":1}]}`"
            },
            "timezone": {
              "description": "timezone settings\ntype: object",
              "type": "object",
              "default": null,
              "properties": {
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                },
                "value": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Value"
                }
              },
              "x-go-name": "Timezone"
            },
            "transaction": {
              "type": "object",
              "x-go-name": "Transaction"
            },
            "whitelist": {
              "description": "ips to be removed from search",
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "WhiteList",
              "example": [
                "192.1698.10.20"
              ]
            }
          },
          "x-go-name": "Param"
        },
        "timestamp": {
          "description": "this control the time range for used for search",
          "type": "object",
          "required": [
            "from",
            "to"
          ],
          "properties": {
            "from": {
              "description": "current timestamp in miliseconds",
              "type": "integer",
              "format": "int64",
              "x-go-name": "From",
              "example": 1581793200000
            },
            "to": {
              "description": "current timestamp in miliseconds",
              "type": "integer",
              "format": "int64",
              "x-go-name": "To",
              "example": 1581879599000
            }
          },
          "x-go-name": "Timestamp"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionRtcp": {
      "type": "object",
      "properties": {
        "captureId": {
          "type": "string",
          "x-go-name": "CaptureID",
          "example": "\"2001\""
        },
        "capturePass": {
          "type": "string",
          "x-go-name": "CapturePass",
          "example": "myHep"
        },
        "correlation_id": {
          "type": "string",
          "x-go-name": "Correlation_id",
          "example": "wvn6zg@127.0.0.1"
        },
        "create_date": {
          "type": "string",
          "x-go-name": "Create_date",
          "example": "021-10-04T19:16:22.699Z"
        },
        "dbnode": {
          "type": "string",
          "x-go-name": "Dbnode",
          "example": "localnode"
        },
        "dstIp": {
          "type": "string",
          "x-go-name": "DstIP",
          "example": "127.0.0.1"
        },
        "dstPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "DstPort",
          "example": 5060
        },
        "id": {
          "type": "number",
          "format": "double",
          "x-go-name": "ID",
          "example": 1030
        },
        "node": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Node",
          "example": [
            "2001",
            "localnode"
          ]
        },
        "payloadType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PayloadType",
          "example": 100
        },
        "profile": {
          "type": "string",
          "x-go-name": "Profile"
        },
        "proto": {
          "type": "string",
          "x-go-name": "Proto",
          "example": "log"
        },
        "protocol": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Protocol",
          "example": 17
        },
        "protocolFamily": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProtocolFamily",
          "example": 2
        },
        "raw": {
          "type": "string",
          "x-go-name": "Raw"
        },
        "sid": {
          "type": "string",
          "x-go-name": "Sid",
          "example": "wvn6zg@127.0.0.1"
        },
        "srcIp": {
          "type": "string",
          "x-go-name": "SrcIP",
          "example": "127.0.0.1"
        },
        "srcPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "SrcPort",
          "example": 5080
        },
        "timeSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeSeconds",
          "example": 1633374982
        },
        "timeUseconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeUseconds",
          "example": 699000
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionRtp": {
      "type": "object",
      "properties": {
        "captureId": {
          "type": "string",
          "x-go-name": "CaptureID",
          "example": "2001"
        },
        "capturePass": {
          "type": "string",
          "x-go-name": "CapturePass",
          "example": "myHep"
        },
        "correlation_id": {
          "type": "string",
          "x-go-name": "Correlation_id",
          "example": "wvn6zg@127.0.0.1"
        },
        "create_date": {
          "type": "string",
          "x-go-name": "Create_date",
          "example": "021-10-04T19:16:22.699Z"
        },
        "dbnode": {
          "type": "string",
          "x-go-name": "Dbnode",
          "example": "localnode"
        },
        "dstIp": {
          "type": "string",
          "x-go-name": "DstIP",
          "example": "127.0.0.1"
        },
        "dstPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "DstPort",
          "example": 5060
        },
        "id": {
          "type": "number",
          "format": "double",
          "x-go-name": "ID",
          "example": 1030
        },
        "node": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Node",
          "example": [
            "2001",
            "localnode"
          ]
        },
        "payloadType": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PayloadType",
          "example": 100
        },
        "profile": {
          "type": "string",
          "x-go-name": "Profile"
        },
        "proto": {
          "type": "string",
          "x-go-name": "Proto",
          "example": "log"
        },
        "protocol": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Protocol",
          "example": 17
        },
        "protocolFamily": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ProtocolFamily",
          "example": 2
        },
        "raw": {
          "type": "string",
          "x-go-name": "Raw"
        },
        "sid": {
          "type": "string",
          "x-go-name": "Sid",
          "example": "wvn6zg@127.0.0.1"
        },
        "srcIp": {
          "type": "string",
          "x-go-name": "SrcIP",
          "example": "127.0.0.1"
        },
        "srcPort": {
          "type": "number",
          "format": "double",
          "x-go-name": "SrcPort",
          "example": 5080
        },
        "timeSeconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeSeconds",
          "example": 1633374982
        },
        "timeUseconds": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TimeUseconds",
          "example": 699000
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SearchTransactionRtpList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchTransactionRtp"
          },
          "x-go-name": "Data"
        }
      },
      "x-go-name": "SearchTransactionRtcpList",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SmartSearchField": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category",
          "example": "sip"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name",
          "example": "callid"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value",
          "example": "sip.callid"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SmartSearchFieldList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SmartSearchField"
              },
              "x-go-name": "Data"
            }
          },
          "x-go-name": "Data"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "SuccessResponse": {
      "type": "object",
      "required": [
        "count",
        "data",
        "message"
      ],
      "properties": {
        "count": {
          "description": "count elements in data",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "data": {
          "description": "data in JSON format\ntype: object",
          "type": "object",
          "x-go-name": "Data"
        },
        "message": {
          "description": "the message for user",
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-name": "SuccessfulResponse",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "TableRtpStatsV2": {
      "type": "object",
      "required": [
        "sid"
      ],
      "properties": {
        "create_date": {
          "description": "Create data",
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateDate"
        },
        "data_header": {
          "description": "data_header",
          "type": "object",
          "x-go-name": "DataHeader"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "protocol_header": {
          "description": "protocol_header",
          "type": "object",
          "x-go-name": "ProtocolHeader"
        },
        "raw": {
          "description": "raw",
          "type": "object",
          "x-go-name": "Raw"
        },
        "sid": {
          "description": "should be a unique value representing user",
          "type": "string",
          "x-go-name": "SID",
          "example": "e71771a2-1ea0-498f-8d27-391713e10664"
        }
      },
      "x-go-name": "TableRawData",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "TextResponse": {
      "type": "object",
      "properties": {
        "File": {
          "$ref": "#/definitions/File"
        }
      },
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "UserCreateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "af72057b-2745-0a1b-b674-56586aadec57"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully created user"
        }
      },
      "x-go-name": "UserCreateSuccessfulResponse",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "UserDeleteSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "af72057b-2745-0a1b-b674-56586aadec57"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully deleted user"
        }
      },
      "x-go-name": "UserDeleteSuccessfulResponse",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "UserLogin": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password",
          "example": "sipcapture"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username",
          "example": "admin"
        }
      },
      "x-go-name": "UserloginDetails",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "UserLoginSuccessResponse": {
      "type": "object",
      "properties": {
        "scope": {
          "description": "the uuid",
          "type": "string",
          "x-go-name": "Scope",
          "example": "b9f6q23a-0bde-41ce-cd36-da3dbc17ea12"
        },
        "token": {
          "description": "the token",
          "type": "string",
          "x-go-name": "Token",
          "example": "JWT Token"
        },
        "user": {
          "description": "the uuid",
          "type": "object",
          "properties": {
            "admin": {
              "type": "boolean",
              "x-go-name": "Admin"
            }
          },
          "x-go-name": "User"
        }
      },
      "x-go-name": "UserTokenSuccessfulResponse",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "UserSettings": {
      "type": "object",
      "required": [
        "guid",
        "username",
        "partid",
        "category",
        "param"
      ],
      "properties": {
        "category": {
          "type": "string",
          "x-go-name": "Category",
          "example": "profile"
        },
        "data": {
          "type": "object",
          "x-go-name": "Data"
        },
        "guid": {
          "description": "should be a unique value representing user",
          "type": "string",
          "x-go-name": "GUID",
          "example": "e71771a2-1ea0-498f-8d27-391713e10664"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "param": {
          "type": "string",
          "x-go-name": "Param",
          "example": "homer"
        },
        "partid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PartId",
          "example": 10
        },
        "username": {
          "type": "string",
          "x-go-name": "UserName"
        }
      },
      "x-go-name": "TableUserSettings",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "UserUpdateSuccessResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "x-go-name": "Data",
          "example": "af72057b-2745-0a1b-b674-56586aadec57"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message",
          "example": "successfully updated user"
        }
      },
      "x-go-name": "UserUpdateSuccessfulResponse",
      "x-go-package": "github.com/sipcapture/homer-app/model"
    },
    "file": {
      "description": "The extra level of indirection ensures that no clients of os\ncan overwrite this data, which could cause the finalizer\nto close the wrong file descriptor.",
      "type": "object",
      "title": "file is the real representation of *File.",
      "x-go-package": "os"
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}